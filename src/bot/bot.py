# -*- coding: utf-8 -*-

import prettytable as pt
import telebot
import sys
import logging
import time

from utils import config as cfg_utils
from db import utils as db_utils
from models import user
from db.exceptions import UserNotFoundError

sys.path.append('../resources/')
config = cfg_utils.load("../resources/config.yml")

bot = telebot.TeleBot(config["telegram"]["token"])
telebot.logger.setLevel(logging.INFO)

user_repo = db_utils.get_repos(config)

text_messages = {
    'start': u'{name}, –ø—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é ‚ú®',
    'sr_found': '–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É; –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä %s',
    'sr_still_looking': u'–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É üí™ –ú—ã –ø–æ–∫–∞ –µ—â–µ –∏—â–µ–º –≤–∞–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏ —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏—à–µ–º –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–∞–∫ –Ω–∞–π–¥–µ–º',
    'sr_accepted': '–ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É üî• –°—Ä–∞–∑—É –∂–µ –Ω–∞–ø–∏—à–µ–º –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–∞–∫ –Ω–∞–π–¥–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞',

    'cr_check': '–í–∞—à–∞ –ø–∞—Ä–∞ - @%s',
    'cr_still_looking': '–ú—ã –≤—Å–µ –µ—â–µ –∏—â–µ–º –≤–∞–º –ø–∞—Ä—É ü•≤ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ—Ç, –Ω–æ –ø—Ä–∏—à–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ',
    'cr_cant_find_you': '–ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –µ–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏',

    'ar_by_partner': '–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤–∞–º –Ω–æ–≤—É—é –ø–∞—Ä—É',
    'ar_successfully': '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',

    'wrong_usr': '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤–≤–µ–¥–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ; –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start',
    'wrong_srv': '–ü–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
}


@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

    markup.row('–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É', '–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É')
    if message.from_user.username == config["admin"]["username"]:
        markup.row('–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—ã', '–ø–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤')

    msg = bot.send_message(message.from_user.id,
                           text_messages['start'].format(name=message.from_user.first_name),
                           reply_markup=markup)
    bot.register_next_step_handler(msg, handler)


@bot.message_handler(content_types=['text'])
def handler(message):
    if message.text == '–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—ã':
        try:
            users = user_repo.list()

            id2name = []
            for usr in users:
                id2name.append({'id': usr.id, 'username': usr.username})

            table = pt.PrettyTable(['u1', 'u2'])

            while len(users) > 0:
                usr = users[0]
                uid2 = "none"

                for i2n in id2name:
                    if i2n["id"] == usr.pair:
                        uid2 = i2n["id"]
                        table.add_row([usr.username, i2n["username"]])
                        break

                users.remove(usr)
                for usr in users:
                    if usr.id == uid2:
                        users.remove(usr)
                        break
            msg = bot.send_message(message.from_user.id, f'```{table}```', parse_mode='MarkdownV2')
        except Exception as ex:
            msg = bot.send_message(message.from_user.id, text_messages["wrong_srv"])
            logging.error(ex)

    elif message.text == '–ø–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤':
        try:
            users = user_repo.list()
            table = pt.PrettyTable(['username', 'status'])

            for usr in users:
                if usr.pair != "none":
                    table.add_row((usr.username, "‚úÖ"))
                else:
                    table.add_row((usr.username, "‚ùå"))
            msg = bot.send_message(message.from_user.id, f'```{table}```', parse_mode='MarkdownV2')
        except Exception as ex:
            msg = bot.send_message(message.from_user.id, text_messages["wrong_srv"])
            logging.error(ex)

    elif message.text == '–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        try:
            usr = user_repo.get_by_id(id=message.from_user.id)
            if usr.pair != "none":
                try:
                    usr2 = user_repo.get_by_id(id=usr.pair)
                    msg = bot.send_message(message.from_user.id, text_messages["sr_found"] % usr2.username)
                except Exception as ex:
                    msg = bot.send_message(message.from_user.id, text_messages["wrong_srv"])
                    logging.error(ex)
            else:
                msg = bot.send_message(message.from_user.id, text_messages["sr_still_looking"])
        except UserNotFoundError as ex:
            try:
                user_repo.add(user.User(
                    id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                    pair="none"
                ))
                msg = bot.send_message(message.from_user.id, text_messages["sr_accepted"])
            except Exception as ex:
                msg = bot.send_message(message.from_user.id, text_messages["wrong_srv"])
                logging.error(ex)

    elif message.text == '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É':
        try:
            usr = user_repo.get_by_id(id=message.from_user.id)

            if usr.pair != "none":
                try:
                    usr = user_repo.get_by_id(id=usr.pair)
                    msg = bot.send_message(message.from_user.id, text_messages["cr_check"] % usr.username)
                except UserNotFoundError as ex:
                    msg = bot.send_message(message.from_user.id, text_messages["wrong_srv"])
                    logging.error(ex)
            else:
                msg = bot.send_message(message.from_user.id, text_messages["cr_still_looking"])
        except UserNotFoundError as ex:
            msg = bot.send_message(message.from_user.id, text_messages["cr_cant_find_you"])
            logging.error(ex)
        except Exception as ex:
            msg = bot.send_message(message.from_user.id, text_messages["wrong_srv"])
            logging.error(ex)

    elif message.text == '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
        try:
            usr = user_repo.get_by_id(id=message.from_user.id)
            if usr.pair != "none":
                uid2 = usr.pair
                try:
                    user_repo.delete_by_id(uid2)
                    msg = bot.send_message(uid2, text_messages["ar_by_partner"])
                except Exception as ex:
                    msg = bot.send_message(message.from_user.id, text_messages["wrong_srv"])
                    logging.error(ex)

            try:
                user_repo.delete_by_id(usr.id)
                msg = bot.send_message(message.from_user.id, text_messages["ar_successfully"])
            except Exception as ex:
                msg = bot.send_message(message.from_user.id, text_messages["wrong_srv"])
                logging.error(ex)

        except UserNotFoundError as ex:
            msg = bot.send_message(message.from_user.id, text_messages["cant_find_request"])
            logging.error(ex)

    else:
        msg = bot.send_message(message.from_user.id, text_messages["wrong_usr"])


def run():
    while True:
        try:
            bot.polling(non_stop=True, interval=0, timeout=10)
        except Exception as ex:
            logging.info("[telegram] Failed: %s" % ex)
            time.sleep(3)
