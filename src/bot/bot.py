# -*- coding: utf-8 -*-

import telebot
import json
import sys
import logging
import time

from utils import config as cfg_utils
from db import utils as db_utils
from telebot import TeleBot, types
from models import user

sys.path.append('../resources/')

bot = TeleBot("")
telebot.logger.setLevel(logging.INFO)

# bot.enable_save_next_step_handlers(delay=2)

config = cfg_utils.load("../resources/config.yml")
user_repo, meet_repo = db_utils.get_repos(config)

text_messages = {
    'start':
        u'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é ‚ú®'
}


@bot.message_handler(commands=['start'])
def start(message):
    print('KK')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    username = message.from_user.username
    if username == "kvendingoldo":
        markup.row('–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—ã', '–ø–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤')
    else:
        markup.row('–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É', '–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É')

    msg = bot.send_message(message.from_user.id,
                           text_messages['start'].format(name=message.from_user.first_name),
                           reply_markup=markup)
    bot.register_next_step_handler(msg, handler)


@bot.message_handler(content_types=['text'])
def handler(message):
    # print(message)
    # db = connect(db_url, db_collection)
    # new_menu = []
    # new_msg = ''
    # new_handler = None

    if message.text == '–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—ã':
        msg = bot.send_message(message.from_user.id, "tst")
    elif message.text == '–ø–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤':
        msg = bot.send_message(message.from_user.id, "tst")

    elif message.text == '–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        try:
            usr2 = user_repo.get_by_id(id=message.from_user.id)
            if usr2.had_pair:
                msg = bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É")
            else:
                msg = bot.send_message(message.from_user.id, "tst")
        except Exception as e:
            print(e)


        try:
            user_repo.add(user.User(
                id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                has_pair=0
            ))
        except Exception as e:
            print(e)
        msg = bot.send_message(message.from_user.id, "tst")
    elif message.text == '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É':
        try:
            usr = user_repo.get_by_id(id=message.from_user.id)
            if usr.has_pair:
                meet = meet_repo.list(spec={"or": {"uid1": usr.id, "uid2": usr.id}})[0]

                uid2 = ""
                if meet.uid1 == usr.id:
                    uid2 = meet.uid1
                else:
                    uid2 = meet.uid2


                usr2 = user_repo.get_by_id(id=uid2)
                msg = bot.send_message(message.from_user.id, "–í–∞—à–∞ –ø–∞—Ä–∞ - %s" % usr2.username)

            else:
                msg = bot.send_message(message.from_user.id, "–ú—ã –≤—Å–µ –µ—â–µ –∏—â–µ–º –≤–∞–º –ø–∞—Ä—É ü•≤ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ—Ç, –Ω–æ –ø—Ä–∏—à–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        except Exception as e:
            print(e)




    elif message.text == '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
        msg = bot.send_message(message.from_user.id, "tst")
    else:
        msg = bot.send_message(message.from_user.id,
                               "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤–≤–µ–¥–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ; –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")

    # markup = create_menu(new_menu, back=True)
    msg = bot.send_message(message.from_user.id, new_msg, reply_markup=markup)
    # bot.register_next_step_handler(msg, new_handler)


def run():
    while True:
        try:
            bot.polling(non_stop=True, interval=1, timeout=10)
        except Exception as e:
            logging.info("[telegram] Failed: %s" % e)
            time.sleep(15)
